{"version":3,"sources":["components/Field.js","components/InputsType/FormTextType.js","components/InputsType/FormRangeType.js","components/InputsType/FormCheckboxType.js","components/InputsType/FormRadioType.js","components/ComponentConfig.js","components/Preview.js","components/App.js","serviceWorker.js","index.js"],"names":["Field","props","id","labelText","type","placeholder","name","value","onChange","className","min","max","htmlFor","checked","FormTextType","values","label","defaultValue","FormRangeType","FormCheckboxType","FormRadioType","Wrapper","styled","section","inputsConfig","text","password","email","checkbox","radio","range","step","typesInputs","Object","keys","ComponentConfig","state","typeInput","onChangeTypeInput","e","setState","target","initValues","onChangeValue","renderFormByTypeInput","onAddComponent","preventDefault","addComponent","reset","_","prevState","this","map","index","key","onClick","React","Component","Preview","delete","persist","console","log","components","component","App","newComponents","filter","i","message","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a14d7caf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Field = (props) => {\r\n  const {\r\n    id,\r\n    labelText,\r\n    type,\r\n    placeholder,\r\n    name,\r\n    value,\r\n    onChange,\r\n    className,\r\n    min,\r\n    max,\r\n  } = props;\r\n  return (\r\n    <div>\r\n      <label htmlFor={id}>{labelText}</label>\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={className}\r\n        min={min}\r\n        max={max}\r\n        checked={value}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\nimport Field from \"../Field\";\r\n\r\nconst FormTextType = (props) => {\r\n  const { values, onChange } = props;\r\n  return (\r\n    <div>\r\n      <Field\r\n        name=\"label\"\r\n        value={values.label}\r\n        labelText=\"Label\"\r\n        onChange={onChange}\r\n      />\r\n      <Field\r\n        name=\"defaultValue\"\r\n        value={values.defaultValue}\r\n        labelText=\"DefaultValue\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormTextType;\r\n","import React from \"react\";\r\nimport Field from \"../Field\";\r\n\r\nconst FormRangeType = (props) => {\r\n  const { values, onChange } = props;\r\n  return (\r\n    <div>\r\n      <Field\r\n        name=\"label\"\r\n        value={values.label}\r\n        labelText=\"Label\"\r\n        onChange={onChange}\r\n      />\r\n      <Field\r\n        name=\"min\"\r\n        value={values.min}\r\n        labelText=\"min\"\r\n        onChange={onChange}\r\n      />\r\n      <Field\r\n        name=\"max\"\r\n        value={values.max}\r\n        labelText=\"max\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormRangeType;\r\n","import React from \"react\";\r\nimport Field from \"../Field\";\r\n\r\nconst FormCheckboxType = (props) => {\r\n  const { values, onChange } = props;\r\n  return (\r\n    <div>\r\n      <Field\r\n        name=\"label\"\r\n        value={values.label}\r\n        labelText=\"Label\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormCheckboxType;\r\n","import React from \"react\";\r\nimport Field from \"../Field\";\r\n\r\nconst FormRadioType = (props) => {\r\n  const { values, onChange } = props;\r\n  return (\r\n    <div>\r\n      <Field\r\n        name=\"label\"\r\n        value={values.label}\r\n        labelText=\"Label\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormRadioType;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n// import Field from \"./Field\";\r\nimport FormTextType from \"./InputsType/FormTextType\";\r\nimport FormRangeType from \"./InputsType/FormRangeType\";\r\nimport FormCheckboxType from \"./InputsType/FormCheckboxType\";\r\nimport FormRadioType from \"./InputsType/FormRadioType\";\r\n\r\nconst Wrapper = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst inputsConfig = {\r\n  text: {\r\n    type: \"text\",\r\n    label: \"\",\r\n    defaultValue: \"\",\r\n  },\r\n  password: {\r\n    type: \"password\",\r\n    label: \"\",\r\n    defaultValue: \"\",\r\n  },\r\n  email: {\r\n    type: \"email\",\r\n    label: \"\",\r\n    defaultValue: \"\",\r\n  },\r\n  checkbox: {\r\n    type: \"checkbox\",\r\n    label: \"\",\r\n    defaultValue: true,\r\n  },\r\n  radio: {\r\n    type: \"radio\",\r\n    label: \"\",\r\n    defaultValue: true,\r\n  },\r\n  range: {\r\n    type: \"range\",\r\n    min: \"0\",\r\n    max: \"50\",\r\n    defaultValue: \"0\",\r\n    step: \"1\",\r\n  },\r\n};\r\n\r\nconst typesInputs = Object.keys(inputsConfig);\r\n\r\nexport default class ComponentConfig extends React.Component {\r\n  state = {\r\n    typeInput: \"\",\r\n    values: {},\r\n  };\r\n\r\n  onChangeTypeInput = (e) => {\r\n    this.setState({ typeInput: e.target.value });\r\n  };\r\n\r\n  componentDidUpdate(_, prevState) {\r\n    if (this.state.typeInput !== prevState.typeInput) {\r\n      this.initValues(this.state.typeInput);\r\n    }\r\n  }\r\n\r\n  initValues = (typeInput) => {\r\n    const values = inputsConfig[typeInput] || {};\r\n    this.setState({\r\n      values,\r\n    });\r\n  };\r\n\r\n  onChangeValue = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState((state) => ({\r\n      values: {\r\n        ...state.values,\r\n        [name]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  renderFormByTypeInput = (typeInput) => {\r\n    switch (typeInput) {\r\n      case \"text\":\r\n      case \"password\":\r\n      case \"email\":\r\n        return (\r\n          <FormTextType\r\n            values={this.state.values}\r\n            onChange={this.onChangeValue}\r\n          />\r\n        );\r\n      case \"radio\":\r\n        return (\r\n          <FormRadioType\r\n            values={this.state.values}\r\n            onChange={this.onChangeValue}\r\n          />\r\n        );\r\n      case \"checkbox\":\r\n        return (\r\n          <FormCheckboxType\r\n            values={this.state.values}\r\n            onChange={this.onChangeValue}\r\n          />\r\n        );\r\n      case \"range\":\r\n        return (\r\n          <FormRangeType\r\n            values={this.state.values}\r\n            onChange={this.onChangeValue}\r\n          />\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  onAddComponent = (e) => {\r\n    const {\r\n      values: { label },\r\n    } = this.state;\r\n    e.preventDefault();\r\n    if (label) {\r\n      this.props.addComponent(this.state.values);\r\n      this.reset();\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ typeInput: \"\", values: {} });\r\n  };\r\n\r\n  render() {\r\n    const { typeInput } = this.state;\r\n    return (\r\n      <Wrapper>\r\n        <div className=\"d-flex mt-4\">\r\n          <select\r\n            name=\"type\"\r\n            value={typeInput}\r\n            onChange={this.onChangeTypeInput}\r\n          >\r\n            <option value=\"\">Choose field type</option>\r\n            {typesInputs.map((type, index) => (\r\n              <option value={type} key={index}>\r\n                {type}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"options mt-4\">\r\n          {this.renderFormByTypeInput(typeInput)}\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={this.onAddComponent}\r\n          className=\"mt-4 btn btn-dark\"\r\n        >\r\n          Add Components\r\n        </button>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Field from \"./Field\";\r\n\r\nexport default class Preview extends React.Component {\r\n  onClick = (e, index) => {\r\n    this.props.delete(index);\r\n  };\r\n\r\n  onChange = (e) => {\r\n    e.persist();\r\n    console.log(\"onChange\");\r\n  };\r\n\r\n  render() {\r\n    const { components } = this.props;\r\n\r\n    return (\r\n      <>\r\n        {components.map((component, index) => (\r\n          <div className=\"d-flex\" key={index}>\r\n            <Field\r\n              className=\"d-flex flex-column\"\r\n              labelText={component.label}\r\n              type={component.type}\r\n              value={component.defaultValue}\r\n              min={component.min}\r\n              max={component.max}\r\n              onChange={this.onChange}\r\n              name={component.label}\r\n            />\r\n            <button\r\n              className=\"btn btn-light delete ml-2\"\r\n              onClick={(e) => this.onClick(e, index)}\r\n            >\r\n              delete\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n//import Field from \"./Field\";\r\nimport ComponentConfig from \"./ComponentConfig\";\r\nimport Preview from \"./Preview\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    components: [],\r\n  };\r\n\r\n  delete = (index) => {\r\n    const { components } = this.state;\r\n    const newComponents = components.filter((component, i) => index !== i);\r\n    this.setState({ components: newComponents });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    const { type, message } = this.state;\r\n    e.preventDefault();\r\n    if (type && message) {\r\n      this.setState((state) => {\r\n        return {\r\n          components: [\r\n            ...state.components,\r\n            { type: state.type, message: state.message },\r\n          ],\r\n          type: \"\",\r\n          message: \"\",\r\n        };\r\n      });\r\n    } else {\r\n      alert(\"fill in all the fields\");\r\n    }\r\n  };\r\n\r\n  addComponent = (values) => {\r\n    this.setState((state) => {\r\n      return {\r\n        components: [...state.components, values],\r\n      };\r\n    });\r\n  };\r\n\r\n  delete;\r\n\r\n  render() {\r\n    const { components } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"config col-6\">\r\n              <h2> Components config</h2>\r\n              <form>\r\n                <ComponentConfig addComponent={this.addComponent} />\r\n              </form>\r\n            </div>\r\n            <div className=\"preview col-6\">\r\n              <h2>Components preview</h2>\r\n              <Preview components={components} delete={this.delete} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport \"./styles/styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}