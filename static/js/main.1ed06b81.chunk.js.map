{"version":3,"sources":["components/Field.js","components/ComponentConfig.js","components/Preview.js","components/App.js","serviceWorker.js","index.js"],"names":["Field","props","id","labelText","type","placeholder","name","value","onChange","htmlFor","Wrapper","styled","section","types","ComponentConfig","getOptionsItems","items","key","map","item","this","values","firstSelect","firstInput","React","Component","WrapperPreview","Preview","showElements","App","state","onClick","e","preventDefault","console","log","setShowElements","setState","persist","target","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAmBeA,EAjBD,SAACC,GAAW,IAChBC,EAA4DD,EAA5DC,GAAIC,EAAwDF,EAAxDE,UAAWC,EAA6CH,EAA7CG,KAAMC,EAAuCJ,EAAvCI,YAAaC,EAA0BL,EAA1BK,KAAMC,EAAoBN,EAApBM,MAAOC,EAAaP,EAAbO,SACvD,OACE,6BACE,2BAAOC,QAASP,GAAKC,GACrB,2BACED,GAAIA,EACJE,KAAMA,EACNC,YAAaA,EACbC,KAAMA,EACNC,MAAOA,EACPC,SAAUA,M,yFCTlB,IAAME,EAAUC,IAAOC,QAAV,KAIPC,EAAQ,CAAC,OAAQ,YAEFC,E,4MACnBC,gBAAkB,SAACC,GAMjB,MAAM,CAJJ,4BAAQC,IAAK,OAAQV,MAAO,IAA5B,SAIF,mBAEKS,EAAME,KAAI,SAACC,GAAD,OACX,4BAAQF,IAAKE,EAAMZ,MAAOY,GACvBA,S,uDAMC,IAAD,EACsBC,KAAKnB,MAA1BoB,EADD,EACCA,OAAQb,EADT,EACSA,SAChB,OACE,kBAACE,EAAD,KACE,4BACER,GAAG,cACHI,KAAK,cACLC,MAAOc,EAAOC,YACdd,SAAUA,GAETY,KAAKL,gBAAgBF,IAExB,kBAAC,EAAD,CACEX,GAAG,aACHE,KAAK,OACLC,YAAY,OACZC,KAAK,aACLC,MAAOc,EAAOE,WACdf,SAAUA,S,GAnCyBgB,IAAMC,W,qECNnD,IAAMC,EAAiBf,IAAOC,QAAV,KAECe,E,uKACT,IAAD,EAC0BP,KAAKnB,MAA9BoB,EADD,EACCA,OAAQO,EADT,EACSA,aAChB,OACE,oCACGA,EACC,kBAACF,EAAD,KACE,2BAAOjB,QAAQ,SAASY,EAAOE,YAC/B,kBAAC,EAAD,CACErB,GAAG,QACHE,KAAMiB,EAAOC,YACbjB,YAAY,OACZC,KAAK,WAGP,U,GAfyBkB,IAAMC,WCyD5BI,E,4MAzDbC,MAAQ,CACNT,OAAQ,CACNC,YAAa,GACbC,WAAY,IAEdK,cAAc,G,EAGhBG,QAAU,SAACC,GACTA,EAAEC,iBACFC,QAAQC,IAAI,SACZ,EAAKC,mB,EAGPA,gBAAkB,WAChB,EAAKC,UAAS,SAACP,GACb,MAAO,CAAEF,cAAeE,EAAMF,kB,EAIlCpB,SAAW,SAACwB,GACVA,EAAEM,UACF,EAAKD,UAAS,SAACP,GAAD,MAAY,CACxBT,OAAO,2BACFS,EAAMT,QADL,kBAEHW,EAAEO,OAAOjC,KAAO0B,EAAEO,OAAOhC,a,uDAKtB,IAAD,EAC0Ba,KAAKU,MAA9BT,EADD,EACCA,OAAQO,EADT,EACSA,aAEhB,OACE,yBAAKY,UAAU,OACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBACb,kDACA,8BACE,kBAAC,EAAD,CAAiBhC,SAAUY,KAAKZ,SAAUa,OAAQA,IAClD,4BAAQU,QAASX,KAAKW,QAASS,UAAU,QACrCZ,EAAkC,mBAAnB,oBAIvB,yBAAKY,UAAU,iBACb,mDACA,kBAAC,EAAD,CAASnB,OAAQA,EAAQO,aAAcA,Y,GAjDnCJ,IAAMC,WCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.1ed06b81.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Field = (props) => {\r\n  const { id, labelText, type, placeholder, name, value, onChange } = props;\r\n  return (\r\n    <div>\r\n      <label htmlFor={id}>{labelText}</label>\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Field from \"./Field\";\r\n\r\nconst Wrapper = styled.section`\r\n  display: flex;\r\n`;\r\n\r\nconst types = [\"text\", \"password\"];\r\n\r\nexport default class ComponentConfig extends React.Component {\r\n  getOptionsItems = (items) => {\r\n    const defaultOption = (\r\n      <option key={\"Type\"} value={\"\"}>\r\n        Type\r\n      </option>\r\n    );\r\n    return [\r\n      defaultOption,\r\n      ...items.map((item) => (\r\n        <option key={item} value={item}>\r\n          {item}\r\n        </option>\r\n      )),\r\n    ];\r\n  };\r\n\r\n  render() {\r\n    const { values, onChange } = this.props;\r\n    return (\r\n      <Wrapper>\r\n        <select\r\n          id=\"firstSelect\"\r\n          name=\"firstSelect\"\r\n          value={values.firstSelect}\r\n          onChange={onChange}\r\n        >\r\n          {this.getOptionsItems(types)}\r\n        </select>\r\n        <Field\r\n          id=\"firstInput\"\r\n          type=\"text\"\r\n          placeholder=\"text\"\r\n          name=\"firstInput\"\r\n          value={values.firstInput}\r\n          onChange={onChange}\r\n        />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Field from \"./Field\";\r\n\r\nconst WrapperPreview = styled.section``;\r\n\r\nexport default class Preview extends React.Component {\r\n  render() {\r\n    const { values, showElements } = this.props;\r\n    return (\r\n      <>\r\n        {showElements ? (\r\n          <WrapperPreview>\r\n            <label htmlFor=\"input\">{values.firstInput}</label>\r\n            <Field\r\n              id=\"input\"\r\n              type={values.firstSelect}\r\n              placeholder=\"Item\"\r\n              name=\"input\"\r\n            />\r\n          </WrapperPreview>\r\n        ) : null}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n//import Field from \"./Field\";\nimport ComponentConfig from \"./ComponentConfig\";\nimport Preview from \"./Preview\";\n\nclass App extends React.Component {\n  state = {\n    values: {\n      firstSelect: \"\",\n      firstInput: \"\",\n    },\n    showElements: false,\n  };\n\n  onClick = (e) => {\n    e.preventDefault();\n    console.log(\"click\");\n    this.setShowElements();\n  };\n\n  setShowElements = () => {\n    this.setState((state) => {\n      return { showElements: !state.showElements };\n    });\n  };\n\n  onChange = (e) => {\n    e.persist();\n    this.setState((state) => ({\n      values: {\n        ...state.values,\n        [e.target.name]: e.target.value,\n      },\n    }));\n  };\n\n  render() {\n    const { values, showElements } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"config col-6\">\n              <h2> Components config</h2>\n              <form>\n                <ComponentConfig onChange={this.onChange} values={values} />\n                <button onClick={this.onClick} className=\"mt-4\">\n                  {!showElements ? \"Add Components\" : \"Delete component\"}\n                </button>\n              </form>\n            </div>\n            <div className=\"preview col-6\">\n              <h2> Components preview</h2>\n              <Preview values={values} showElements={showElements} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport \"./styles/styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}